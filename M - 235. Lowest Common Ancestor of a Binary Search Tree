# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        #start at root
        #check if p and q are on different sides OR if the root is either p or q
        #if yes, return node
        #otherwise, p and q must be on same side
        #call function on child node on that side

        if root.val == p.val or root.val == q.val or (p.val < root.val and q.val > root.val) or (p.val > root.val and q.val < root.val):
            return root
        else:
            if p.val < root.val:
                return self.lowestCommonAncestor(root.left, p, q)
            else:
                return self.lowestCommonAncestor(root.right, p, q)
